(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{462:function(n,e,t){"use strict";var r=t(449),o=(t(450),t(451),t(452),t(453),t(454),t(455),t(456),t(457),t(458),t(459),t(460),t(1)),s=t.n(o);function a(n){var e=n.value,t=n.children,o=n.language,a=void 0===o?"none":o;if(!t&&!e)return null;["javascript jsx"].indexOf(a)&&(a="jsx"),["typescript jsx"].indexOf(a)&&(a="tsx"),["sh"].indexOf(a)&&(a="bash"),r.languages[a]||(a="none");var i=r.languages[a]?r.languages[a]:r.languages.js,p=Object(r.highlight)(t||e,i),u="language-"+a;return s.a.createElement("pre",{className:u},s.a.createElement("code",{className:u,dangerouslySetInnerHTML:{__html:p}}))}var i=t(461),p=t.n(i);function u(n){var e=n.text,t=n.children;return s.a.createElement(p.a,{source:e||t,renderers:{code:a}})}t.d(e,"a",function(){return a}),t.d(e,"b",function(){return u})},464:function(n,e){n.exports="Installation\n===============================\n\n```\nnpm install react-router-store\n```\n\n`react-router-store` makes the `react-router` processing simpler for server side rendering.\n\nUsage\n===============================\n\nCreate async and sync route stores\n----------------------------------------\n\n```typescript\n// asyncRouteStore.ts\nimport { RouteStore, AsyncRouteStore } from 'react-router-store';\n\nexport const asyncRouteStore: RouteStore = new AsyncRouteStore([\n  {\n    path: '/',\n    exact: true,\n    component: () => import('./pages/main'),\n  },\n  {\n    path: '/sample',\n    component: () => import('./pages/sample'),\n  },\n]);\n```\n\n```typescript\n// syncRouteStore.ts\nimport { RouteStore, SyncRouteStore } from 'react-router-store';\n\nimport main from './pages/main';\nimport sample from './pages/sample'; \n\nexport const syncRouteStore: RouteStore = new SyncRouteStore([\n  {\n      path: '/',\n      exact: true,\n      component: main,\n    },\n    {\n      path: '/sample',\n      component: sample,\n    },\n]);\n```\n\nAdd `<Route/>`\n----------------------------------------\n\n```typescript jsx\n// main.tsx\nimport React from 'react';\nimport { RouteStore, Suspense } from 'react-router-store';\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\n\ninterface MainProps {\n  routeStore: RouteStore;\n}\n\nfunction LoadingMessage() {\n  return <div>Loading...</div>;\n}\n\nexport function Main({ routeStore }: MainProps) {\n  return (\n    <div id=\"layout\">\n      <ul id=\"navigation\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/sample\">Home</Link>\n        </li>\n      </ul>\n      \n      <div id=\"content\">\n        <Suspense fallback={<LoadingMessage/>}>\n          <Switch>\n            {/*<Route exact path=\"/\" component={}/>*/}\n            {/*<Route path=\"/sample\" component={}/>*/}\n            {routeStore.getAllRoutes()}\n          </Switch>\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n```\n\nCreates entry files\n----------------------------------------\n\nCreates entry files for client and server.\n\n```typescript jsx\n// client.tsx\nimport React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nimport { asyncRouteStore } from './asyncRouteStore';\nimport { Main } from './main';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Main routeStore={asyncRouteStore}/>\n    </BrowserRouter>\n  )\n}\n\nif (window.__INITIAL_STATE__) {\n  asyncRouteStore.preload(location.pathname).then(() => {\n    hydrate(<App/>, document.querySelector('#app'));\n  });\n} else {\n  render(<App/>, document.querySelector('#app'));\n}\n```\n\nFor client, preloads the route component before running the app.\n\n```typescript jsx\n// server.tsx\nimport React from 'react';\nimport { StaticRouter } from 'react-router';\nimport express, { Express, Request, Response } from 'express';\nimport { renderToString } from 'react-dom/server';\n\nimport { syncRouteStore } from './syncRouteStore';\nimport { Main } from './main';\n\nfunction renderHtml(url: string, initialState: object): string {\n  const htmlText: string = renderToString(\n    <StaticRouter location={url} context={{}}>\n      <Main routeStore={syncRouteStore}/>\n    </StaticRouter>\n  );\n  \n  return `\n    <html>\n      <head>\n        <meta charset=UTF-8>\n        <script>\n          window.__INITIAL_STATE__ = ${initialState.replace(/</g, '\\\\u003c')};\n        <\/script>\n      </head>\n      <body>\n        <div id=\"app\">${htmlText}</div>\n      </body>\n    </html>\n  `;\n}\n\nconst app: Express = express();\n\napp.get('/', (req: Request, res: Response) => {\n  res.send(renderHtml(req.url, {}));\n});\n\napp.get('/sample', (req: Request, res: Response) => {\n  res.send(renderHtml(req.url, {}));\n});\n\napp.listen(8080);\n```\n\nAdd a test\n----------------------------------------\n\nAdd a test to make sure both stores are set to the same options.\n\n```typescript\nimport { compareRouteOptions } from 'react-router-store';\nimport { asyncRouteStore } from './asyncRouteStore';\nimport { syncRouteStore } from './syncRouteStore';\n\ndescribe('/route', () => {\n  it('Should be matched all route options of stores', () => {\n    expect(compareRouteOptions(\n      asyncRouteStore.getRouteOptions(),\n      syncRouteStore.getRouteOptions(),\n    )).toBeTruthy();\n  });\n});\n```\n\n"},487:function(n,e,t){"use strict";t.r(e);var r=t(1),o=t.n(r),s=t(462);e.default=function(){return o.a.createElement("div",null,o.a.createElement(s.b,{text:t(464)}))}}}]);