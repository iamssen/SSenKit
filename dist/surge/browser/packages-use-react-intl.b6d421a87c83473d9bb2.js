(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{349:function(n,e,t){"use strict";t.r(e);var r=t(1),a=t.n(r),s=t(652);e.default=function(){return a.a.createElement("div",null,a.a.createElement(s.b,{text:t(658)}))}},652:function(n,e,t){"use strict";var r=t(638),a=(t(639),t(640),t(641),t(642),t(643),t(644),t(645),t(646),t(647),t(648),t(649),t(1)),s=t.n(a);function o(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];for(var r=0,a=e;r<a.length;r++){var s=a[r];if("string"===typeof s)return s;if("object"===typeof s&&s.default&&"string"===typeof s.default)return s.default}}function i(n){var e=n.value,t=n.children,a=n.language,i=void 0===a?"none":a,l=o(t,e);if(!l)return null;["javascript jsx"].indexOf(i)&&(i="jsx"),["typescript jsx"].indexOf(i)&&(i="tsx"),["sh"].indexOf(i)&&(i="bash"),r.languages[i]||(i="none");var u=r.languages[i]?r.languages[i]:r.languages.js,c=Object(r.highlight)(l,u,i),p="language-"+i;return s.a.createElement("pre",{className:p},s.a.createElement("code",{className:p,dangerouslySetInnerHTML:{__html:c}}))}var l=t(650),u=t.n(l);function c(n){var e=o(n.text,n.children);return e?s.a.createElement(u.a,{source:e,renderers:{code:i}}):null}t.d(e,"a",function(){return i}),t.d(e,"b",function(){return c})},658:function(n,e,t){"use strict";t.r(e),e.default="# Installation\n\n```\nnpm install use-react-intl\n```\n\nMakes `react-intl` to be used as a Function component hook.\n\nThis module can be used temporarily until `react-intl` supports the React 16.3 Context API.\n\nAfter that, it is better to use React 16.8 `useContext()` hook.\n\n# Usage\n\n```typescript jsx\nimport React from 'react';\nimport { IntlProvider } from 'use-react-intl';\nimport { App } from './app';\n\nexport function Main(locale: 'en' | 'ko', messages: {[messageId: string]: string}) {\n  return (\n    <IntlProvider locale={locale} messages={messages}>\n      <App/>\n    </IntlProvider>\n  )\n}\n```\n\nFirst, you need to add `<IntlProvider/>` to your app.\n\nIts usage is the same as `<IntlProvider/>` in `react-intl`.\n\n```typescript jsx\nimport React from 'react';\nimport { InjectedIntl } from 'react-intl';\nimport { useIntl } from 'use-react-intl';\n\nexport function Component() {\n  const intl: InjectedIntl = useIntl();\n  \n  return (\n    <span>\n      {intl.formatMessage({id: 'some.intl.text'})}\n    </span>\n  )\n}\n```\n\nThen, you can use a hook function `useIntl()`."}}]);